// <auto-generated />
using System;
using BarbariBahar.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarbariBahar.API.Migrations
{
    [DbContext(typeof(BarbariBaharDbContext))]
    [Migration("20251026153447_AddTicketMessagingSystem")]
    partial class AddTicketMessagingSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OrderAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<long>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OtpRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpRequests");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackagingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PackagingProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsActive = true,
                            IsAvailable = true,
                            Name = "کارتن سه لایه",
                            Price = 50000m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            IsActive = true,
                            IsAvailable = true,
                            Name = "نایلون حباب دار (متری)",
                            Price = 25000m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            IsActive = true,
                            IsAvailable = true,
                            Name = "چسب پهن",
                            Price = 30000m,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackagingProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PackagingProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "کارتن‌ها"
                        },
                        new
                        {
                            Id = 2,
                            Name = "لوازم محافظتی"
                        });
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackingServiceSubItem", b =>
                {
                    b.Property<int>("PackingServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackingServiceId", "SubItemId");

                    b.HasIndex("SubItemId");

                    b.ToTable("PackingServiceSubItem");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PricingFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("PricingFactors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "وانت",
                            Price = 500000m,
                            ServiceCategoryId = 1,
                            Unit = "سرویس"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "کارگر",
                            Price = 250000m,
                            ServiceCategoryId = 1,
                            Unit = "نفر"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "هزینه به ازای هر کیلومتر",
                            Price = 10000m,
                            ServiceCategoryId = 2,
                            Unit = "کیلومتر"
                        });
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جابجایی شهری"
                        },
                        new
                        {
                            Id = 2,
                            Name = "حمل بار بین شهری"
                        },
                        new
                        {
                            Id = 3,
                            Name = "بسته بندی"
                        });
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.TicketMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("TicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("BarbariBahar.API.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Customer", b =>
                {
                    b.HasBaseType("BarbariBahar.API.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Driver", b =>
                {
                    b.HasBaseType("BarbariBahar.API.Data.Entities.User");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CarPlateNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkerCount")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Order", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarbariBahar.API.Data.Entities.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OrderAddress", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.Order", "Order")
                        .WithMany("OrderAddresses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.OtpRequest", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.User", "User")
                        .WithMany("OtpRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackagingProduct", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.PackagingProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackingServiceSubItem", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.PricingFactor", "PackingService")
                        .WithMany()
                        .HasForeignKey("PackingServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarbariBahar.API.Data.Entities.PricingFactor", "SubItem")
                        .WithMany()
                        .HasForeignKey("SubItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackingService");

                    b.Navigation("SubItem");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PricingFactor", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("PricingFactors")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Ticket", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId");

                    b.HasOne("BarbariBahar.API.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.TicketMessage", b =>
                {
                    b.HasOne("BarbariBahar.API.Data.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarbariBahar.API.Data.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderAddresses");

                    b.Navigation("OrderItems");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.PackagingProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.ServiceCategory", b =>
                {
                    b.Navigation("PricingFactors");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.User", b =>
                {
                    b.Navigation("OtpRequests");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BarbariBahar.API.Data.Entities.Driver", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
